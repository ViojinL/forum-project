generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(uuid())
  email                   String             @unique
  username                String             @unique
  password                String
  isAdmin                 Boolean            @default(false)
  creditScore             Int                @default(100)
  banUntil                DateTime?
  contactInfo             String?
  signature               String?
  avatar                  String?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  comments                Comment[]
  posts                   Post[]
  violationMarkedPosts    PostViolation[]    @relation("MarkedByAdmin")
  violationMarkedComments CommentViolation[] @relation("MarkedByAdmin")
  inbox                   UserInbox[]
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  posts       Post[]
}

model Post {
  id          String          @id @default(uuid())
  title       String
  content     String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  authorId    String
  categoryId  String
  isViolation Boolean         @default(false)
  editCount   Int             @default(0)
  comments    Comment[]
  category    Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author      User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  violations  PostViolation[]
}

model Comment {
  id          String             @id @default(uuid())
  content     String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  authorId    String
  postId      String
  isViolation Boolean            @default(false)
  editCount   Int                @default(0)
  post        Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  violations  CommentViolation[]
}

model PostViolation {
  id             String   @id @default(uuid())
  post           Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId         String
  markedByAdmin  User     @relation("MarkedByAdmin", fields: [adminId], references: [id])
  adminId        String
  reason         String
  pointsDeducted Int
  createdAt      DateTime @default(now())

  @@unique([postId, adminId])
}

model CommentViolation {
  id             String   @id @default(uuid())
  comment        Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId      String
  markedByAdmin  User     @relation("MarkedByAdmin", fields: [adminId], references: [id])
  adminId        String
  reason         String
  pointsDeducted Int
  createdAt      DateTime @default(now())

  @@unique([commentId, adminId])
}

model UserInbox {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message          String
  type             String // "post_violation", "comment_violation", "system", etc.
  relatedPostId    String?
  relatedCommentId String?
  isRead           Boolean  @default(false)
  createdAt        DateTime @default(now())
}
